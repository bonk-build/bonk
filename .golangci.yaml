# Copyright Â© 2025 Colden Cullen
# SPDX-License-Identifier: MIT

version: "2"

linters:
  default: all
  disable:
    - err113
    - exhaustruct
    - gochecknoinits
    - wsl
    - wsl_v5

    # TODO
    - funlen
    - gochecknoglobals
    - revive

  settings:
    depguard:
      # Rules to apply.
      #
      # Variables:
      # - File Variables
      #   Use an exclamation mark `!` to negate a variable.
      #   Example: `!$test` matches any file that is not a go test file.
      #
      #   `$all` - matches all go files
      #   `$test` - matches all go test files
      #
      # - Package Variables
      #
      #   `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)
      rules:
        main:
          # Defines package matching behavior. Available modes:
          # - `original`: allowed if it doesn't match the deny list and either matches the allow list or the allow list is empty.
          # - `strict`: allowed only if it matches the allow list and either doesn't match the deny list or the allow rule is more specific (longer) than the deny rule.
          # - `lax`: allowed if it doesn't match the deny list or the allow rule is more specific (longer) than the deny rule.
          list-mode: lax
          deny:
            - pkg: "math/rand$"
              desc: use math/rand/v2
            - pkg: "github.com/pkg/errors"
              desc: Should be replaced by standard lib errors package

    gosec:
      excludes:
        - G204 # Subprocess launched with variable
        - G304 # Potential file inclusion via variable

    mnd:
      # List of numbers to exclude from analysis.
      # The numbers should be written as string.
      # Values always ignored: "1", "1.0", "0" and "0.0".
      ignored-numbers:
        - '0o600'
        - '0o750'

formatters:
  # Enable specific formatter.
  enable:
    - gci
    - gofmt
    - gofumpt
    - golines

  # Formatters settings.
  settings:
    gci:
      # Section configuration to compare against.
      # Section names are case-insensitive and may contain parameters in ().
      # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`.
      # If `custom-order` is `true`, it follows the order of `sections` option.
      sections:
        - standard # Standard section: captures all standard packages.
        - default # Default section: contains all imports that could not be matched to another section type.
        - prefix(google.golang.org) # Custom section: groups all imports with the specified Prefix.
        - prefix(sigs.k8s.io) # Custom section: groups all imports with the specified Prefix.
        - prefix(cuelang.org) # Custom section: groups all imports with the specified Prefix.
        - prefix(github.com) # Custom section: groups all imports with the specified Prefix.
        - blank # Blank section: contains all blank imports.
        - alias # Alias section: contains all alias imports.
        - localmodule # Local module section: contains all local packages.
      # Checks that no inline comments are present.
      # Default: false
      no-inline-comments: true
      # Checks that no prefix comments (comment lines above an import) are present.
      # Default: false
      no-prefix-comments: true
      # Enable custom order of sections.
      # If `true`, make the section order the same as the order of `sections`.
      # Default: false
      custom-order: true

    gofmt:
      # Simplify code: gofmt with `-s` option.
      # Default: true
      simplify: true
      rewrite-rules:
        - pattern: "interface{}"
          replacement: "any"
        - pattern: "a[b:len(a)]"
          replacement: "a[b:]"

    gofumpt:
      # Module path which contains the source code being formatted.
      module-path: go.bonk.build

      # Choose whether to use the extra rules.
      extra-rules: true

    goimports:
      # A list of prefixes, which, if set, checks import paths
      # with the given prefixes are grouped after 3rd-party packages.
      # Default: []
      local-prefixes:
        - go.bonk.build

    golines:
      # Length of a tabulation.
      tab-len: 2

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  max-same-issues: 0

  # Fix found issues (if it's supported by the linter).
  fix: true

# Options for analysis running.
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 5m

  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be:
  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.
  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).
  # - `cfg`: the paths will be relative to the configuration file.
  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.
  relative-path-mode: gomod

  # List of build tags, all linters use it.
  build-tags:
    - docs

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  default: error
