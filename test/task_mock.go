// Copyright Â© 2025 Colden Cullen
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/task (interfaces: Executor)
//
// Generated by this command:
//
//	mockgen -destination task_mock.go -package test -copyright_file ../license-header.txt -typed ../pkg/task Executor
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	task "go.bonk.build/pkg/task"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor[Params any] struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder[Params]
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder[Params any] struct {
	mock *MockExecutor[Params]
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor[Params any](ctrl *gomock.Controller) *MockExecutor[Params] {
	mock := &MockExecutor[Params]{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder[Params]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor[Params]) EXPECT() *MockExecutorMockRecorder[Params] {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockExecutor[Params]) CloseSession(ctx context.Context, sessionId task.SessionId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSession", ctx, sessionId)
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockExecutorMockRecorder[Params]) CloseSession(ctx, sessionId any) *MockExecutorCloseSessionCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockExecutor[Params])(nil).CloseSession), ctx, sessionId)
	return &MockExecutorCloseSessionCall[Params]{Call: call}
}

// MockExecutorCloseSessionCall wrap *gomock.Call
type MockExecutorCloseSessionCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorCloseSessionCall[Params]) Return() *MockExecutorCloseSessionCall[Params] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorCloseSessionCall[Params]) Do(f func(context.Context, task.SessionId)) *MockExecutorCloseSessionCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorCloseSessionCall[Params]) DoAndReturn(f func(context.Context, task.SessionId)) *MockExecutorCloseSessionCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockExecutor[Params]) Execute(ctx context.Context, tsk *task.Task[Params], result *task.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, tsk, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutorMockRecorder[Params]) Execute(ctx, tsk, result any) *MockExecutorExecuteCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor[Params])(nil).Execute), ctx, tsk, result)
	return &MockExecutorExecuteCall[Params]{Call: call}
}

// MockExecutorExecuteCall wrap *gomock.Call
type MockExecutorExecuteCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorExecuteCall[Params]) Return(arg0 error) *MockExecutorExecuteCall[Params] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorExecuteCall[Params]) Do(f func(context.Context, *task.Task[Params], *task.Result) error) *MockExecutorExecuteCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorExecuteCall[Params]) DoAndReturn(f func(context.Context, *task.Task[Params], *task.Result) error) *MockExecutorExecuteCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockExecutor[Params]) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockExecutorMockRecorder[Params]) Name() *MockExecutorNameCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockExecutor[Params])(nil).Name))
	return &MockExecutorNameCall[Params]{Call: call}
}

// MockExecutorNameCall wrap *gomock.Call
type MockExecutorNameCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorNameCall[Params]) Return(arg0 string) *MockExecutorNameCall[Params] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorNameCall[Params]) Do(f func() string) *MockExecutorNameCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorNameCall[Params]) DoAndReturn(f func() string) *MockExecutorNameCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenSession mocks base method.
func (m *MockExecutor[Params]) OpenSession(ctx context.Context, session task.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockExecutorMockRecorder[Params]) OpenSession(ctx, session any) *MockExecutorOpenSessionCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockExecutor[Params])(nil).OpenSession), ctx, session)
	return &MockExecutorOpenSessionCall[Params]{Call: call}
}

// MockExecutorOpenSessionCall wrap *gomock.Call
type MockExecutorOpenSessionCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorOpenSessionCall[Params]) Return(arg0 error) *MockExecutorOpenSessionCall[Params] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorOpenSessionCall[Params]) Do(f func(context.Context, task.Session) error) *MockExecutorOpenSessionCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorOpenSessionCall[Params]) DoAndReturn(f func(context.Context, task.Session) error) *MockExecutorOpenSessionCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
