// Copyright Â© 2025 Colden Cullen
// SPDX-License-Identifier: MIT

edition = "2023";
package bonk.v0;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

message OpenSessionRequest {
  message LogStreamingOptions {
    int64 level = 1;
    bool add_source = 2;
  }

  message WorkspaceDescriptionLocal {
    string absolute_path = 1;
  }

  message WorkspaceDescriptionTest {}

  string session_id = 1;
  LogStreamingOptions log_streaming = 2;

  oneof workspace_description {
    WorkspaceDescriptionLocal local = 5;

    WorkspaceDescriptionTest test = 99;
  }
}

message OpenSessionResponse {
  message Ack {}

  // This is meant to mirror [slog.Record](https://pkg.go.dev/log/slog#Record)
  message LogRecord {
    google.protobuf.Timestamp time = 1;
    string message = 2;
    int64 level = 3;
    map<string, google.protobuf.Value> attrs = 4;
  }

  oneof message {
    Ack ack = 1;
    LogRecord log_record = 2;
  }
}

message CloseSessionRequest {
  string id = 1;
}

message CloseSessionResponse {}

message ExecuteTaskRequest {
  string session_id = 1;
  string id = 2;
  string executor = 3;
  repeated string inputs = 4;
  google.protobuf.Value arguments = 5;
}

message ExecuteTaskResponse {
  message FollowupTask {
    string id = 1;
    string executor = 2;
    repeated string inputs = 3;
    google.protobuf.Value arguments = 4;
  }

  repeated string output = 1;
  repeated FollowupTask followup_tasks = 2;
}

service ExecutorService {
  // Used for opening & closing sessions
  rpc OpenSession(OpenSessionRequest) returns (stream OpenSessionResponse);
  rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);

  // Executor interface
  rpc ExecuteTask(ExecuteTaskRequest) returns (ExecuteTaskResponse);
}
