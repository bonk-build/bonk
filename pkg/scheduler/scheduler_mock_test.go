// Copyright Â© 2025 Colden Cullen
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: go.bonk.build/pkg/scheduler (interfaces: TaskSender)
//
// Generated by this command:
//
//	mockgen -destination scheduler_mock_test.go -package scheduler -copyright_file ../../license-header.txt -typed . TaskSender
//

// Package scheduler is a generated GoMock package.
package scheduler

import (
	context "context"
	reflect "reflect"

	task "go.bonk.build/pkg/task"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskSender is a mock of TaskSender interface.
type MockTaskSender struct {
	ctrl     *gomock.Controller
	recorder *MockTaskSenderMockRecorder
	isgomock struct{}
}

// MockTaskSenderMockRecorder is the mock recorder for MockTaskSender.
type MockTaskSenderMockRecorder struct {
	mock *MockTaskSender
}

// NewMockTaskSender creates a new mock instance.
func NewMockTaskSender(ctrl *gomock.Controller) *MockTaskSender {
	mock := &MockTaskSender{ctrl: ctrl}
	mock.recorder = &MockTaskSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskSender) EXPECT() *MockTaskSenderMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTaskSender) Execute(ctx context.Context, tsk task.Task) (*task.TaskResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, tsk)
	ret0, _ := ret[0].(*task.TaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTaskSenderMockRecorder) Execute(ctx, tsk any) *MockTaskSenderExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTaskSender)(nil).Execute), ctx, tsk)
	return &MockTaskSenderExecuteCall{Call: call}
}

// MockTaskSenderExecuteCall wrap *gomock.Call
type MockTaskSenderExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskSenderExecuteCall) Return(arg0 *task.TaskResult, arg1 error) *MockTaskSenderExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskSenderExecuteCall) Do(f func(context.Context, task.Task) (*task.TaskResult, error)) *MockTaskSenderExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskSenderExecuteCall) DoAndReturn(f func(context.Context, task.Task) (*task.TaskResult, error)) *MockTaskSenderExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
