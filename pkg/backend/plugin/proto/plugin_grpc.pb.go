// Copyright Â© 2025 Colden Cullen
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: backend/plugin/proto/plugin.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CuebePluginService_ConfigurePlugin_FullMethodName = "/backend.plugin.proto.CuebePluginService/ConfigurePlugin"
	CuebePluginService_PerformTask_FullMethodName     = "/backend.plugin.proto.CuebePluginService/PerformTask"
)

// CuebePluginServiceClient is the client API for CuebePluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CuebePluginServiceClient interface {
	ConfigurePlugin(ctx context.Context, in *ConfigurePluginRequest, opts ...grpc.CallOption) (*ConfigurePluginResponse, error)
	PerformTask(ctx context.Context, in *PerformTaskRequest, opts ...grpc.CallOption) (*PerformTaskResponse, error)
}

type cuebePluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCuebePluginServiceClient(cc grpc.ClientConnInterface) CuebePluginServiceClient {
	return &cuebePluginServiceClient{cc}
}

func (c *cuebePluginServiceClient) ConfigurePlugin(ctx context.Context, in *ConfigurePluginRequest, opts ...grpc.CallOption) (*ConfigurePluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurePluginResponse)
	err := c.cc.Invoke(ctx, CuebePluginService_ConfigurePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuebePluginServiceClient) PerformTask(ctx context.Context, in *PerformTaskRequest, opts ...grpc.CallOption) (*PerformTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformTaskResponse)
	err := c.cc.Invoke(ctx, CuebePluginService_PerformTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CuebePluginServiceServer is the server API for CuebePluginService service.
// All implementations must embed UnimplementedCuebePluginServiceServer
// for forward compatibility.
type CuebePluginServiceServer interface {
	ConfigurePlugin(context.Context, *ConfigurePluginRequest) (*ConfigurePluginResponse, error)
	PerformTask(context.Context, *PerformTaskRequest) (*PerformTaskResponse, error)
	mustEmbedUnimplementedCuebePluginServiceServer()
}

// UnimplementedCuebePluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCuebePluginServiceServer struct{}

func (UnimplementedCuebePluginServiceServer) ConfigurePlugin(context.Context, *ConfigurePluginRequest) (*ConfigurePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePlugin not implemented")
}
func (UnimplementedCuebePluginServiceServer) PerformTask(context.Context, *PerformTaskRequest) (*PerformTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformTask not implemented")
}
func (UnimplementedCuebePluginServiceServer) mustEmbedUnimplementedCuebePluginServiceServer() {}
func (UnimplementedCuebePluginServiceServer) testEmbeddedByValue()                            {}

// UnsafeCuebePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CuebePluginServiceServer will
// result in compilation errors.
type UnsafeCuebePluginServiceServer interface {
	mustEmbedUnimplementedCuebePluginServiceServer()
}

func RegisterCuebePluginServiceServer(s grpc.ServiceRegistrar, srv CuebePluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedCuebePluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CuebePluginService_ServiceDesc, srv)
}

func _CuebePluginService_ConfigurePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuebePluginServiceServer).ConfigurePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuebePluginService_ConfigurePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuebePluginServiceServer).ConfigurePlugin(ctx, req.(*ConfigurePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuebePluginService_PerformTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuebePluginServiceServer).PerformTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuebePluginService_PerformTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuebePluginServiceServer).PerformTask(ctx, req.(*PerformTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CuebePluginService_ServiceDesc is the grpc.ServiceDesc for CuebePluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CuebePluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.plugin.proto.CuebePluginService",
	HandlerType: (*CuebePluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigurePlugin",
			Handler:    _CuebePluginService_ConfigurePlugin_Handler,
		},
		{
			MethodName: "PerformTask",
			Handler:    _CuebePluginService_PerformTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/plugin/proto/plugin.proto",
}
