// Copyright Â© 2025 Colden Cullen
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: go.bonk.build/pkg/executor/argconv (interfaces: TypedExecutor)
//
// Generated by this command:
//
//	mockgen -destination typedexecutor_mock.go -package argconv -copyright_file ../../../license-header.txt -typed . TypedExecutor
//

// Package argconv is a generated GoMock package.
package argconv

import (
	context "context"
	reflect "reflect"

	task "go.bonk.build/pkg/task"
	gomock "go.uber.org/mock/gomock"
)

// MockTypedExecutor is a mock of TypedExecutor interface.
type MockTypedExecutor[Params any] struct {
	ctrl     *gomock.Controller
	recorder *MockTypedExecutorMockRecorder[Params]
	isgomock struct{}
}

// MockTypedExecutorMockRecorder is the mock recorder for MockTypedExecutor.
type MockTypedExecutorMockRecorder[Params any] struct {
	mock *MockTypedExecutor[Params]
}

// NewMockTypedExecutor creates a new mock instance.
func NewMockTypedExecutor[Params any](ctrl *gomock.Controller) *MockTypedExecutor[Params] {
	mock := &MockTypedExecutor[Params]{ctrl: ctrl}
	mock.recorder = &MockTypedExecutorMockRecorder[Params]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypedExecutor[Params]) EXPECT() *MockTypedExecutorMockRecorder[Params] {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockTypedExecutor[Params]) CloseSession(ctx context.Context, sessionId task.SessionID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSession", ctx, sessionId)
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockTypedExecutorMockRecorder[Params]) CloseSession(ctx, sessionId any) *MockTypedExecutorCloseSessionCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockTypedExecutor[Params])(nil).CloseSession), ctx, sessionId)
	return &MockTypedExecutorCloseSessionCall[Params]{Call: call}
}

// MockTypedExecutorCloseSessionCall wrap *gomock.Call
type MockTypedExecutorCloseSessionCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTypedExecutorCloseSessionCall[Params]) Return() *MockTypedExecutorCloseSessionCall[Params] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTypedExecutorCloseSessionCall[Params]) Do(f func(context.Context, task.SessionID)) *MockTypedExecutorCloseSessionCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTypedExecutorCloseSessionCall[Params]) DoAndReturn(f func(context.Context, task.SessionID)) *MockTypedExecutorCloseSessionCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockTypedExecutor[Params]) Execute(ctx context.Context, tsk *task.Task, args *Params, result *task.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, tsk, args, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTypedExecutorMockRecorder[Params]) Execute(ctx, tsk, args, result any) *MockTypedExecutorExecuteCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTypedExecutor[Params])(nil).Execute), ctx, tsk, args, result)
	return &MockTypedExecutorExecuteCall[Params]{Call: call}
}

// MockTypedExecutorExecuteCall wrap *gomock.Call
type MockTypedExecutorExecuteCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTypedExecutorExecuteCall[Params]) Return(arg0 error) *MockTypedExecutorExecuteCall[Params] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTypedExecutorExecuteCall[Params]) Do(f func(context.Context, *task.Task, *Params, *task.Result) error) *MockTypedExecutorExecuteCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTypedExecutorExecuteCall[Params]) DoAndReturn(f func(context.Context, *task.Task, *Params, *task.Result) error) *MockTypedExecutorExecuteCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenSession mocks base method.
func (m *MockTypedExecutor[Params]) OpenSession(ctx context.Context, session task.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockTypedExecutorMockRecorder[Params]) OpenSession(ctx, session any) *MockTypedExecutorOpenSessionCall[Params] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockTypedExecutor[Params])(nil).OpenSession), ctx, session)
	return &MockTypedExecutorOpenSessionCall[Params]{Call: call}
}

// MockTypedExecutorOpenSessionCall wrap *gomock.Call
type MockTypedExecutorOpenSessionCall[Params any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTypedExecutorOpenSessionCall[Params]) Return(arg0 error) *MockTypedExecutorOpenSessionCall[Params] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTypedExecutorOpenSessionCall[Params]) Do(f func(context.Context, task.Session) error) *MockTypedExecutorOpenSessionCall[Params] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTypedExecutorOpenSessionCall[Params]) DoAndReturn(f func(context.Context, task.Session) error) *MockTypedExecutorOpenSessionCall[Params] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
