// Copyright Â© 2025 Colden Cullen
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: ../ (interfaces: Executor)
//
// Generated by this command:
//
//	mockgen -destination executor_mock.go -package mockexec -copyright_file ../../../license-header.txt -typed ../ Executor
//

// Package mockexec is a generated GoMock package.
package mockexec

import (
	context "context"
	reflect "reflect"

	task "go.bonk.build/pkg/task"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockExecutor) CloseSession(ctx context.Context, sessionID task.SessionID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSession", ctx, sessionID)
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockExecutorMockRecorder) CloseSession(ctx, sessionID any) *MockExecutorCloseSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockExecutor)(nil).CloseSession), ctx, sessionID)
	return &MockExecutorCloseSessionCall{Call: call}
}

// MockExecutorCloseSessionCall wrap *gomock.Call
type MockExecutorCloseSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorCloseSessionCall) Return() *MockExecutorCloseSessionCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorCloseSessionCall) Do(f func(context.Context, task.SessionID)) *MockExecutorCloseSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorCloseSessionCall) DoAndReturn(f func(context.Context, task.SessionID)) *MockExecutorCloseSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockExecutor) Execute(ctx context.Context, tsk *task.Task, result *task.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, tsk, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutorMockRecorder) Execute(ctx, tsk, result any) *MockExecutorExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor)(nil).Execute), ctx, tsk, result)
	return &MockExecutorExecuteCall{Call: call}
}

// MockExecutorExecuteCall wrap *gomock.Call
type MockExecutorExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorExecuteCall) Return(arg0 error) *MockExecutorExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorExecuteCall) Do(f func(context.Context, *task.Task, *task.Result) error) *MockExecutorExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorExecuteCall) DoAndReturn(f func(context.Context, *task.Task, *task.Result) error) *MockExecutorExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenSession mocks base method.
func (m *MockExecutor) OpenSession(ctx context.Context, session task.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockExecutorMockRecorder) OpenSession(ctx, session any) *MockExecutorOpenSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockExecutor)(nil).OpenSession), ctx, session)
	return &MockExecutorOpenSessionCall{Call: call}
}

// MockExecutorOpenSessionCall wrap *gomock.Call
type MockExecutorOpenSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorOpenSessionCall) Return(arg0 error) *MockExecutorOpenSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorOpenSessionCall) Do(f func(context.Context, task.Session) error) *MockExecutorOpenSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorOpenSessionCall) DoAndReturn(f func(context.Context, task.Session) error) *MockExecutorOpenSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
