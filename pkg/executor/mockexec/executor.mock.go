// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockexec

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"go.bonk.build/pkg/task"
)

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// CloseSession provides a mock function for the type MockExecutor
func (_mock *MockExecutor) CloseSession(ctx context.Context, sessionID task.SessionID) {
	_mock.Called(ctx, sessionID)
	return
}

// MockExecutor_CloseSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSession'
type MockExecutor_CloseSession_Call struct {
	*mock.Call
}

// CloseSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID task.SessionID
func (_e *MockExecutor_Expecter) CloseSession(ctx interface{}, sessionID interface{}) *MockExecutor_CloseSession_Call {
	return &MockExecutor_CloseSession_Call{Call: _e.mock.On("CloseSession", ctx, sessionID)}
}

func (_c *MockExecutor_CloseSession_Call) Run(run func(ctx context.Context, sessionID task.SessionID)) *MockExecutor_CloseSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 task.SessionID
		if args[1] != nil {
			arg1 = args[1].(task.SessionID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutor_CloseSession_Call) Return() *MockExecutor_CloseSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutor_CloseSession_Call) RunAndReturn(run func(ctx context.Context, sessionID task.SessionID)) *MockExecutor_CloseSession_Call {
	_c.Run(run)
	return _c
}

// Execute provides a mock function for the type MockExecutor
func (_mock *MockExecutor) Execute(ctx context.Context, session task.Session, tsk *task.Task, result *task.Result) error {
	ret := _mock.Called(ctx, session, tsk, result)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, task.Session, *task.Task, *task.Result) error); ok {
		r0 = returnFunc(ctx, session, tsk, result)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - session task.Session
//   - tsk *task.Task
//   - result *task.Result
func (_e *MockExecutor_Expecter) Execute(ctx interface{}, session interface{}, tsk interface{}, result interface{}) *MockExecutor_Execute_Call {
	return &MockExecutor_Execute_Call{Call: _e.mock.On("Execute", ctx, session, tsk, result)}
}

func (_c *MockExecutor_Execute_Call) Run(run func(ctx context.Context, session task.Session, tsk *task.Task, result *task.Result)) *MockExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 task.Session
		if args[1] != nil {
			arg1 = args[1].(task.Session)
		}
		var arg2 *task.Task
		if args[2] != nil {
			arg2 = args[2].(*task.Task)
		}
		var arg3 *task.Result
		if args[3] != nil {
			arg3 = args[3].(*task.Result)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockExecutor_Execute_Call) Return(err error) *MockExecutor_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExecutor_Execute_Call) RunAndReturn(run func(ctx context.Context, session task.Session, tsk *task.Task, result *task.Result) error) *MockExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// OpenSession provides a mock function for the type MockExecutor
func (_mock *MockExecutor) OpenSession(ctx context.Context, session task.Session) error {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for OpenSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, task.Session) error); ok {
		r0 = returnFunc(ctx, session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExecutor_OpenSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenSession'
type MockExecutor_OpenSession_Call struct {
	*mock.Call
}

// OpenSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session task.Session
func (_e *MockExecutor_Expecter) OpenSession(ctx interface{}, session interface{}) *MockExecutor_OpenSession_Call {
	return &MockExecutor_OpenSession_Call{Call: _e.mock.On("OpenSession", ctx, session)}
}

func (_c *MockExecutor_OpenSession_Call) Run(run func(ctx context.Context, session task.Session)) *MockExecutor_OpenSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 task.Session
		if args[1] != nil {
			arg1 = args[1].(task.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutor_OpenSession_Call) Return(err error) *MockExecutor_OpenSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExecutor_OpenSession_Call) RunAndReturn(run func(ctx context.Context, session task.Session) error) *MockExecutor_OpenSession_Call {
	_c.Call.Return(run)
	return _c
}
